<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Meditations]]></title>
  <link href="http://cuzzo.github.io/atom.xml" rel="self"/>
  <link href="http://cuzzo.github.io/"/>
  <updated>2014-09-02T00:13:38-07:00</updated>
  <id>http://cuzzo.github.io/</id>
  <author>
    <name><![CDATA[Cuzzo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[80 Characters Is Enough]]></title>
    <link href="http://cuzzo.github.io/blog/2014/08/29/80-characters-is-enough/"/>
    
    <updated>2014-08-29T10:44:33-07:00</updated>
    <id>http://cuzzo.github.io/blog/2014/08/29/80-characters-is-enough</id>
    
    <content type="html"><![CDATA[<p>It&rsquo;s human nature to break the rules. &ldquo;Rules are made to be broken,&rdquo; you must hear at least twice a day during all that time you&rsquo;re not using to floss your teeth. When the Lord God commanded Adam not to eat the fruit of the tree, all it took was one Talking Snake, and look where we are now, all these years later, and well you know what the doctor says about apples&hellip;</p>

<p>We&rsquo;re rule breakers. We break them for fun. We break them for profit. We speed to work. We let our kids eat cotton candy for breakfast. And so on.</p>

<p>But just because we break the rules, it doesn&rsquo;t make it acceptable. It doesn&rsquo;t make the rules dismissable. And it damn well doesn&rsquo;t make that orange skirt look good with the brown terracotta jacket and the purple 10 gallon hat.</p>

<p>And you know what else doesn&rsquo;t look good? Long lines of code.</p>

<p>And just because we push character after character unto our lines, until we&rsquo;ve past through to the hundreds, right into the thousands, and we&rsquo;re well on the way to chaining together the entire text of Great Gatsby all into a one-liner&hellip; That doesn&rsquo;t make it okay, or godly. No, unless you&rsquo;re some sadistic code-god determined to smote the open source community with inline lambdas&hellip;</p>

<p>Whether you&rsquo;re a habitual chainer or not, or whether your line limit is 81 or infinity, I&rsquo;m here to explain why you need to think about the standard of 80, and why it&rsquo;s there, and why it helps. And here&rsquo;s the <strong>TL;DR</strong>:</p>

<ul>
<li><a href="#line-count-means-nothing">Line Count Is Meaningless</a></li>
<li><a href="#a-line-means-something">A Line Has Meaning</a></li>
<li><a href="#because-duh">Because, Duh</a></li>
</ul>


<h1><a name="line-count-means-nothing">Line Count Is Meaningless</a></h1>

<p>There&rsquo;s this mistaken notion that &ldquo;short code&rdquo; is somehow better than &ldquo;long code&rdquo;, as if you can measure quality by how many lines of code something is, as if less lines of code means a faster process&ndash;or it somehow reduces complexity or increases maintainability. No, lines of code, in reality, means nothing. Nothing at all. When it comes to code, statements talk, and&hellip; well nothing else does. And if you jam thirty-seven statements onto one line or ten or you space them out across ten-million, it&rsquo;s still thirty-seven statements.</p>

<p>Thinking about line count is absurd. And the irony that it comes from people that know better is mind-boggling.</p>

<p>These lengthy lines of code frequently come from people that preach about slimming down our functions. We&rsquo;re all in agreement that fat functions are bad. So, all together now, let&rsquo;s take ONE second, un momento, and apply what we know about functions to lines of code.</p>

<p>We like smaller functions because the longer a function, intrinsically, the more frequently it is to change. And this is, in the scientific world, what we call a &ldquo;double whammy&rdquo;. Firstly, since the function is fat/long, any change to it is poorly isolated, and has too vast a depth. I.E., if you&rsquo;re an object, and the responsibilities for <code>shit()ing</code> and <code>faceWash()ing</code> are both housed in the same function, if you&rsquo;re not careful with a change to that function, you just might end up shitting on your face, and well, that&rsquo;s probably not what you had in mind, now is it? Secondly, we just said because it&rsquo;s long, changes to it will happen more frequently. The name of the game here is Not Shitting on Your Face, and, as engineers, we try to do that as much as possible. But, with long functions, we do this all the time, shooting ourselves in the foot, so to speak.</p>

<p>Anyway, let&rsquo;s apply what we know about functions to lines of code. Maybe we&rsquo;ll discover something</p>

<p>Any line with a lot going on is more likely to change than a line with not as much going on. And because a lot is going on, there&rsquo;s a higher likelyhood of someone submitting a pull-request to shit on your face, or break your code, or introduce a bug. And before you butt in with, &ldquo;but that&rsquo;s why we have tests&rdquo;, let me butt back with, &ldquo;do tell me about how you never have production bugs&rdquo;.</p>

<p>Long lines of code are just all around terrible, even more so than long functions, methinks.</p>

<h1><a name="a-line-means-something">A Line Has Meaning</a></h1>

<p>Let&rsquo;s keep applying what we know to be true about functions to lines of code, because, you know, we have a brain, and there&rsquo;s this thing I heard about once in a Kurt Vonnegut book called&hellip; common sense.</p>

<p>Remember the awful days of functions just being there? Remember how they used to just be repositories for things to happen, with no real meaning?</p>

<p>Yeah, it was awful.</p>

<p>But then, the White Knight swept us off our feet. It told us about Single Responsibility. It said, &ldquo;Yo homie, a function has meaning. It should do something. It should mean something. And that should only be one thing. Your functions oughta have a single responsibility.&rdquo;</p>

<p>And this was divine intervetion to our cesspits we called functions. After we applied it, code started to make sense. It started to be testable. It started to be readable. The smells went away. And rainbows started appearing.</p>

<p>But then, the rebels we are, we threw everything we learned out the window when we hopped all aboard the Lambda-Chain-Train headed straight to Hell. We started jamming ten statements (read ten responsibilities) onto a single line of code. We started making functions out of lines, and we got right back to where we started, with our functions (read lines) having multiple responsiblities, and what&rsquo;s really going on in there being a more carefully kept secret than the reveal of an Agatha Christie thriller-mystery.</p>

<p>Maybe it&rsquo;s the suspense driving people wild, or maybe it&rsquo;s the spirit of competition to see who can write the next longest line of code. Whatever it is, it&rsquo;s leading to the Fat2.0 revoluation. Because fat isn&rsquo;t how many lines a function is. It&rsquo;s how many statements it is. Just because you snuck six-hundred statements into two lines of code, that doesn&rsquo;t mean you can call it one function, not any less than you could call that tripple-god-object-in-a-single-function a function.</p>

<p>So let&rsquo;s stop the revulation right here. Let&rsquo;s stop bringing fat back. We&rsquo;re not Justin Timberlake.</p>

<h1><a name="because-duh">Because, Duh</a></h1>

<p>To wrap things up, I&rsquo;ll just state the obvious.</p>

<p>Have you ever written something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
</span><span class='line'><span class="nx">x</span><span class="p">.</span><span class="nx">setName</span><span class="p">(</span><span class="s2">&quot;Cuzzo&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And thought, &ldquo;you know, that&rsquo;s too many lines for that. What would make that good is if I changed it to:&rdquo;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span> <span class="nx">x</span><span class="p">.</span><span class="nx">setName</span><span class="p">(</span><span class="s2">&quot;Cuzzo&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>No.</p>

<p>Why? Because we&rsquo;ve been writing one statement per line since the beginning of computers. With chaining, we see the ability to take out the extra x, and we should. But keep it two separate lines, people. It&rsquo;s two responsibilities.</p>

<p>We might all have monitors long enough to watch six high-def Pornhubs at once. More than 80 characters can definitely fit on the screen. So why not use all that space? Because, one, it&rsquo;s a standard. And, two, if you&rsquo;re going over 80 characters, you&rsquo;ve probably done more than one thing wrong. You probably oughta make a function out ten-minute side-scrolling platform-adventure-game you call a line, so, you know, I don&rsquo;t have to beat Bowser just to know what your line is doing.</p>

<p>The next time you&rsquo;re in the middle of that epic chain, and you&rsquo;re trying to remember if you just <code>filter()ed</code> or <code>map()ed</code>, take a second to think about me, the dumbass, scratching my head all the way back at the beginning, ten high-levels ago, trying to remember what <code>foldRight()</code> does in the first place. Zeesh.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Pretty Code Ugly]]></title>
    <link href="http://cuzzo.github.io/blog/2014/08/25/pretty-code-ugly/"/>
    
    <updated>2014-08-25T12:02:50-07:00</updated>
    <id>http://cuzzo.github.io/blog/2014/08/25/pretty-code-ugly</id>
    
    <content type="html"><![CDATA[<p>There comes a time in everyone&rsquo;s life when appearance becomes important. Usually, it&rsquo;s around the teenage years. For some it&rsquo;s earlier. But by high-school time, c&#8217;mon. What girl can resist the pretty red dress on display in Nordstrom when Prom is around the corner?</p>

<p>And so too comes the time in developers&#8217; lives when we become confident in our programmatic skills and start looking elsewhere to improve. In high school, we might splurge on a superfly jacket with a collar to pop up higher than Count Chocula. In nerd-world, we might stare at a LCD until our eyes go cross and we say something like, &ldquo;hmm&hellip; what this line could use is some whitespace.&rdquo;</p>

<p>And so begins that teenage phase in programming, and instead of brushing our hair and checking out our jaw-line in the mirror, we&rsquo;re smashing our face on the spacebar and pointing to our Github and yelling, &ldquo;MOM! LOOK HOW PRETTY MY CODE IS!&rdquo;</p>

<p>Some people pick up this habbit after they&rsquo;ve written enough for loops to write a permutation function while driving to work with their feet and explaining to Aunt Becky for the tenth time that, &ldquo;No, Aunt Becky, Chicago is not a continent.&rdquo; This type of Pretty Coder is made. Others are born into Pretty Code, learning it from the start, and these unfortuante souls, to me, correspond to the Toddler&rsquo;s in Tiaras of the programming world.</p>

<p>But whether you were born into Pretty Code, or you picked up moonlight typesetting as a hobby to kill time after how awesome your for-loop skills got, I&rsquo;m here to explain why, objectively, Pretty Code is bullshit. And here&rsquo;s the <strong>TL;DR</strong>:</p>

<ul>
<li><a href="#pretty-code-is-unreadable">Pretty Code ain&rsquo;t pretty</a>.</li>
<li><a href="#pretty-code-ruins-revision-history">Pretty Code makes (octo)cats cry</a>.</li>
<li><a href="#pretty-code-is-impractical">Pretty Code is a impractical</a>.</li>
</ul>


<h2><a name="pretty-code-is-unreadable">Pretty Code ain&rsquo;t pretty</a>.</h2>

<p>Let&rsquo;s first establish what Pretty Code is, and why it exists, because that&rsquo;s all that&rsquo;s needed to completely destroy its case. Let&rsquo;s use the least impractical case of Pretty Code first and look at two equal dictionaries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Ugly</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">product_availability</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">phone</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">address</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">n2n</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">something</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">x</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Pretty</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">product_availability</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span>      <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">phone</span><span class="o">:</span>     <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">address</span><span class="o">:</span>   <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">n2n</span><span class="o">:</span>       <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">something</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">x</span><span class="o">:</span>         <span class="kc">false</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see above, one of these blocks is labeled <code>ugly</code> and the other <code>pretty</code>. Pretty Code, as shown above, is the &ldquo;art&rdquo; of lining up pieces of code with whitespace.</p>

<p>We can deduce that Pretty Code isn&rsquo;t done to speed up coding, right? Like how are you possibly adding in that whitespace faster than not adding it in? You&rsquo;re not. It&rsquo;s not faster to write code this way.</p>

<p>Your shiny, new i7 isn&rsquo;t looking at its fingernails and saying, &ldquo;You know, I was going to run this dictionary slow, but then I saw how pretty it is, so let me get back to work and start exuctin&#8217; like a G.&rdquo; Right? We know whitespace has no effect on performance.</p>

<p>So, the only reason I can see to Pretty Code is because it &ldquo;looks&rdquo; better. The key word here is &ldquo;looks&rdquo;.</p>

<p>&ldquo;Why do I care how code looks,&rdquo; might say the Pretty Code naysayer. And the advocate would say, &ldquo;because you read code more than you write it.&rdquo;</p>

<p>And the Pretty Code advocate is exactly right. And, in being so, completely destorys his case. <strong>We read code more than we write it</strong>. Far more. So it ought to be readable. Who said anything about &ldquo;lookable&rdquo;?</p>

<p>Have you ever written one line of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And decided, &ldquo;you know what this line needs is&hellip; whitespace&hellip; lots of whitespace.&rdquo; and, with that thought in mind, refactored it to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">x</span>     <span class="o">=</span>    <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>No.</p>

<p>Why? Because that line is less readable. It doesn&rsquo;t magically become more readable if the line below is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">x</span>     <span class="o">=</span>    <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">pizza</span> <span class="o">=</span> <span class="mi">1001</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty Code looks better, yes. But looking at code isn&rsquo;t important. Reading it is.</p>

<p>You read code at the line level. You look at it at the multiline level.</p>

<h2><a name="pretty-code-ruins-revision-history">Pretty Code makes (octo)cats cry</a>.</h2>

<p>Okay, so you don&rsquo;t care how readable your code is. You just care that you can say, &ldquo;MOM! COME LOOK AT ALL MY WHITESPACE!&rdquo; Fine. You can write your own code however you want.</p>

<p>But, if you&rsquo;re in a team, and you probably are if you&rsquo;re a professional, and you theoretically are&ndash;at the very least&ndash;if you&rsquo;re part of the open source community&hellip; you should maybe consider revision history (and readability).</p>

<p>Let&rsquo;s say that Product comes back and they say, &ldquo;Dammit, Jimmy, we need a new key in that dictionary. The key is <code>virtual_phone_bank</code> and the value <code>Sign up and start saving babies RIGHT NOW!</code>. Chop, chop.&rdquo;</p>

<p>So, you open up <code>./src/config/locales/en.js</code> and you see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">CALL_TO_ACTION</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">disco</span>       <span class="o">:</span> <span class="s2">&quot;Help the president win by dancing RIGHT NOW!&quot;</span>       <span class="p">,</span>
</span><span class='line'>  <span class="nx">post_to_wall</span><span class="o">:</span> <span class="s2">&quot;Post on your Facebook how awesome we are RIGHT NOW!&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">tweet</span>       <span class="o">:</span> <span class="s2">&quot;Post on your Twitter how awesome we are RIGHT NOW!&quot;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you stop for a second to admire how beatiful it is, and then you press <code>i</code> and get to work. But quickly, you&rsquo;re stumpped:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">CALL_TO_ACTION</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">disco</span>       <span class="o">:</span> <span class="s2">&quot;Help the president win by dancing RIGHT NOW!&quot;</span>       <span class="p">,</span>
</span><span class='line'>  <span class="nx">post_to_wall</span><span class="o">:</span> <span class="s2">&quot;Post on your Facebook how awesome we are RIGHT NOW!&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">tweet</span>       <span class="o">:</span> <span class="s2">&quot;Post on your Twitter how awesome we are RIGHT NOW!&quot;</span> <span class="p">,</span>
</span><span class='line'>  <span class="nx">virtual_phone_bank</span><span class="o">:</span> <span class="s2">&quot;Sign up and start saving babies RIGHT NOW!&quot;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;Oh, no!&rdquo; you think, &ldquo;it&rsquo;s so ugly!&rdquo; and after your eyeballs are black and your nose is bluddy and you&rsquo;ve slammed your face on the spacebar a grand total of 18 times, you can go back to saying &ldquo;Mirror, Mirror, on the wall, who has the most whitespace of them all?&rdquo; And you&rsquo;ll know the answer is you, because your code now look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">CALL_TO_ACTION</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">disco</span>             <span class="o">:</span> <span class="s2">&quot;Help the president win by dancing RIGHT NOW!&quot;</span>       <span class="p">,</span>
</span><span class='line'>  <span class="nx">post_to_wall</span>      <span class="o">:</span> <span class="s2">&quot;Post on your Facebook how awesome we are RIGHT NOW!&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">tweet</span>             <span class="o">:</span> <span class="s2">&quot;Post on your Twitter how awesome we are RIGHT NOW!&quot;</span> <span class="p">,</span>
</span><span class='line'>  <span class="nx">virtual_phone_bank</span><span class="o">:</span> <span class="s2">&quot;Sign up and start saving babies RIGHT NOW!&quot;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And, now that you&rsquo;ve worked your typesetting wonders, not only is there the problem that by the time my eyes get to &ldquo;Help the president&hellip;&rdquo; that they&rsquo;re so far removed from &ldquo;disco&rdquo; that I have to look back to remember what I&rsquo;m even assigning to what&hellip; but also, you&rsquo;ve just changed that line of code, and when Teddy from Product goes through to figure out who to fire for putting a joke line in the code, you&rsquo;re going to have to say, &ldquo;But I didn&rsquo;t even write that line! Swear! I just made it pretty is all!&rdquo;</p>

<p>Yes, modern tools make it easy to see the entire revision history of a line. But, yes, revision history is still important anyway. How code &ldquo;looks&rdquo; is not. How it reads is very important, and this does not read well. No, it does read well at all.</p>

<h2><a name="pretty-code-is-impractical">Pretty Code is impractical</a>.</h2>

<p>Finally, let&rsquo;s explore why pretty code isn&rsquo;t even practical in the first place. Because if you&rsquo;ve gotten this far, and you&rsquo;re still on board the Pretty Code Express, maybe this can totally derail you&rsquo;re world.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;/views/homepage/header&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;Obama for America&quot;</span><span class="p">,</span> <span class="nx">subtitle</span><span class="o">:</span> <span class="s2">&quot;Yes We Can!&quot;</span><span class="p">},</span> <span class="p">{</span><span class="nx">layout</span><span class="o">:</span> <span class="kc">false</span><span class="p">})</span>
</span><span class='line'><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;/views/homepage/hero&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">img</span><span class="o">:</span> <span class="s2">&quot;/assets/heros/denver-rally.png&quot;</span><span class="p">,</span> <span class="nx">caption</span><span class="o">:</span> <span class="s2">&quot;A Better America Starts Today.&quot;</span><span class="p">},</span> <span class="p">{</span><span class="nx">layout</span><span class="o">:</span> <span class="kc">true</span><span class="p">})</span>
</span><span class='line'><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;/views/footer&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">links</span><span class="o">:</span> <span class="p">[{</span><span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;about&quot;</span><span class="p">,</span> <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/about&quot;</span><span class="p">},</span> <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;privacy&quot;</span><span class="p">,</span> <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/privacy&quot;</span><span class="p">}]},</span> <span class="p">{</span><span class="nx">layout</span><span class="o">:</span> <span class="kc">false</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re not the type of Pretty Coder that lines up similar functions, thank Stroustrup. But let&rsquo;s assume you are, and let&rsquo;s assume you also don&rsquo;t care about character line limits, and all you care about is how your code &ldquo;looks&rdquo;.</p>

<p>You&rsquo;d end up with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;/views/homepage/header&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;Obama for America&quot;</span><span class="p">,</span> <span class="nx">subtitle</span><span class="o">:</span> <span class="s2">&quot;Yes We Can!&quot;</span><span class="p">}</span>                             <span class="p">,</span> <span class="p">{</span><span class="nx">layout</span><span class="o">:</span> <span class="kc">false</span><span class="p">})</span>
</span><span class='line'><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;/views/homepage/hero&quot;</span>  <span class="p">,</span> <span class="p">{</span><span class="nx">img</span><span class="o">:</span> <span class="s2">&quot;/assets/heros/denver-rally.png&quot;</span><span class="p">,</span> <span class="nx">caption</span><span class="o">:</span> <span class="s2">&quot;A Better America Starts Today.&quot;</span><span class="p">},</span> <span class="p">{</span><span class="nx">layout</span><span class="o">:</span> <span class="kc">true</span><span class="p">})</span>
</span><span class='line'><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;/views/footer&quot;</span>         <span class="p">,</span> <span class="p">{</span><span class="nx">links</span><span class="o">:</span> <span class="p">[{</span><span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;about&quot;</span><span class="p">,</span> <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/about&quot;</span><span class="p">},</span> <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;privacy&quot;</span><span class="p">,</span> <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/privacy&quot;</span><span class="p">}]}</span>   <span class="p">,</span> <span class="p">{</span><span class="nx">layout</span><span class="o">:</span> <span class="kc">false</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which, A) reading that now makes me want to cry, and B) writing that made me want to punch a baby. I mean, I <strong>literally</strong> have three black eyes and two broken noses and my spacebar key doesn&rsquo;t even work anymore. I had to remap it to &ldquo;CAPS LOCK&rdquo; becuase I already broke all the other ones pretty coding with my face so hard.</p>

<p>Anyway, back on topic&hellip; Imagine adding two more links to the <code>links</code> property in the third <code>render</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;/views/homepage/header&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;Obama for America&quot;</span><span class="p">,</span> <span class="nx">subtitle</span><span class="o">:</span> <span class="s2">&quot;Yes We Can!&quot;</span><span class="p">}</span>                                                                                               <span class="p">,</span> <span class="p">{</span><span class="nx">layout</span><span class="o">:</span> <span class="kc">false</span><span class="p">})</span>
</span><span class='line'><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;/views/homepage/hero&quot;</span>  <span class="p">,</span> <span class="p">{</span><span class="nx">img</span><span class="o">:</span> <span class="s2">&quot;/assets/heros/denver-rally.png&quot;</span><span class="p">,</span> <span class="nx">caption</span><span class="o">:</span> <span class="s2">&quot;A Better America Starts Today.&quot;</span><span class="p">}</span>                                                                  <span class="p">,</span> <span class="p">{</span><span class="nx">layout</span><span class="o">:</span> <span class="kc">true</span><span class="p">})</span>
</span><span class='line'><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;/views/footer&quot;</span>         <span class="p">,</span> <span class="p">{</span><span class="nx">links</span><span class="o">:</span> <span class="p">[{</span><span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;about&quot;</span><span class="p">,</span> <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/about&quot;</span><span class="p">},</span> <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;privacy&quot;</span><span class="p">,</span> <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/privacy&quot;</span><span class="p">},</span> <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;terms&quot;</span><span class="p">,</span> <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/terms&quot;</span><span class="p">},</span> <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;jobs&quot;</span><span class="p">,</span> <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/careers&quot;</span><span class="p">}]}</span>  <span class="p">,</span> <span class="p">{</span><span class="nx">layout</span><span class="o">:</span> <span class="kc">false</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not only can I not read a single line of that code, not only have you shitted on the revision history with gusto (twice now), but&ndash;also&ndash;it looks absurd! And that&rsquo;s what the whole point of Pretty Code is, making code look good.</p>

<p>The bottom line is, <strong>Pretty Code isn&rsquo;t practical</strong>. You can add all the whitespace you want to your dictionaries. But, please, no matter what a typesetter tells you, there is no unnecessary whitespace in the open source world.</p>

<p>So the next time you&rsquo;re bored out of your mind, and you&rsquo;ve got out your hair brush, and you&rsquo;re talking to your mirror, and you&rsquo;re about to Pretty Code&hellip; think about us, the ones reading your code. And, think about the spacebar, poor old Mr. Spacebar.</p>
]]></content>
    
  </entry>
  
</feed>