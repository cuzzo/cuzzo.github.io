<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mvc | Meditations]]></title>
  <link href="http://cuzzo.github.io/blog/categories/mvc/atom.xml" rel="self"/>
  <link href="http://cuzzo.github.io/"/>
  <updated>2014-11-21T10:15:15-08:00</updated>
  <id>http://cuzzo.github.io/</id>
  <author>
    <name><![CDATA[Cuzzo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[And Then There Weren't Templates]]></title>
    <link href="http://cuzzo.github.io/blog/2014/09/16/and-then-there-werent-templates/"/>
    <updated>2014-09-16T23:41:41-07:00</updated>
    <id>http://cuzzo.github.io/blog/2014/09/16/and-then-there-werent-templates</id>
    <content type="html"><![CDATA[<p>Ever bought that one super-fly outfit that, for the three days post-purchase, you didn&rsquo;t take it off once? Not even to sleep or shower or anything. You looked so good on Friday, so you wore it on Saturday, and by the time Sunday rolled around, you were making plans based on who hadn&rsquo;t seen your outfit yet. Forget about what you actually wanted to do&hellip; This outfit! It&rsquo;s more important. Remember that outfit?</p>

<p>That&rsquo;s templates.</p>

<p>Remember how awful web development was before templates? And then batManVC swooped in and cleaned up our Spaghetti Gotham codebases. It was awesome. So awesome, in fact, that we never really stopped to think: does this actually make any sense? Because I distinctively remember scratching my chin when I got to the part about templates and saying, &ldquo;is there a silent T in here somewhere?&rdquo; It didn&rsquo;t make sesnse. So you went back to the part about views and all it said was: &ldquo;Weeeeeeeell, it&rsquo;s not <em>really</em> a page, but just think of it as one.&rdquo; Remember how that didn&rsquo;t make sense? The whole V business seemed fishy. It wasn&rsquo;t a page, but it was. Plus it was a template&hellip;. And is it any coincidence that villain and view both start with V? No. But that villainous side of views didn&rsquo;t become obvious until recently.</p>

<p>And it was just like your shiny, new outfit. It wasn&rsquo;t until years later, when you looked back through your Facebook pictures with fingers crossed, thinking, &ldquo;Please don&rsquo;t have on the technicolored windbreaker, the aviators, and the Loudmouths. Please&hellip;&rdquo; that it hit you: your outfit was stupid. <strong>YOU</strong> were stupid.</p>

<p>Which is just like now, when you&rsquo;re navigating a new codebase and saying, &ldquo;Please don&rsquo;t have meaningless, shitty templates. Please don&rsquo;t.&rdquo; But it always does. It never fails. Yet somehow we never piece it together, that maybe&hellip; just maybe&hellip; the system is flawed.</p>

<p>I mean, what do views/templates do in the first place? They make up a page, right? Sort of. Not really. But even if it is a page&hellip; that brings me to the question: in the age of single-page apps, what&rsquo;s a page?</p>

<p>We still have indexes and details and update pages and so on. But in the sidebar, there&rsquo;s all kind of things going on. There&rsquo;s modals (God, are there modals). There&rsquo;s stuff in the footer. You can log in from the header. You can post selfies right to your Facebook from the header! And you can even look at your dumb-ass technicolored windbreaker in the footer if you want to. But you don&rsquo;t want to.</p>

<p>There&rsquo;s an infinite possibility of &ldquo;pages&rdquo; you could be on, on any one &ldquo;page&rdquo;. So why do we still have &ldquo;views&rdquo; when our &ldquo;pages&rdquo; are mostly a collection of mini-views now?</p>

<p>And what about our friend Silent T, the template? He can lay low and render a single list item, or do it big and render the entire layout, or anything in between like the header or the user details, or whatever you feel like, really. And why can Silent T do all this? Because templates don&rsquo;t make any sense either.</p>

<h2>Why Do We Have Templates In the First Place?</h2>

<p>Remember the first time that special someone was coming to the crib? Your room was a wreck. Sweaty gym clothes piled up in the corner, empty Russian Standards littered the floor, and there was pizza sauce all over the ceiling. So what did you do? You threw everything you could into the bathroom, and plastered your favorite Marilyn Monroe poster over the marinara.</p>

<p>And did that really solve anything? No. When your date showed up, you realized you forgot about the macaroni and cheese by the door, and you&rsquo;d gotten so used to how bad your roommate&rsquo;s ankle braces smelled that you forgot to drop a Fabreze Bomb. And of course, guess who went straight to the bathroom to tidy up?</p>

<p>And this is exactly how templates came to be. Somebody was going through some shitty PHP and said, &ldquo;You know&hellip; what would make this file look a lot better is if I put all this shitty HTML somewhere else.&rdquo;</p>

<p>And sure, all that &ldquo;cleaning&rdquo; made the bedroom look better, but the dorm room as a whole&hellip; it didn&rsquo;t improve. It was just a facade. And it couldn&rsquo;t even fake-out someone failing English 98.</p>

<p>So the fact that we had shittily organized HTML wasn&rsquo;t really fixed at all by just moving it somewhere else. We didn&rsquo;t address our shittily designed HTML, we just put it somewhere new. And that, my friends, is how we got the view. The V. The villain.</p>

<h2>So Templates Suck. What&rsquo;s Better?</h2>

<p>The data guys must be the smart guys. Because they looked at the model and said, &ldquo;You know&hellip; one letter isn&rsquo;t really adequate here. We need DAOs and DTOs and maybe a DSL just to interact with the storage engines.&rdquo; Most MVCs shipped with an ORM from the get-go.</p>

<p>And controllers&hellip; any framework that was any framework had a routing framework.</p>

<p>But for views, us front-end guys, we just kept smashing our face on the V key, and hoping that if we split our templates up enough, maybe we&rsquo;d end up with chicken parm.</p>

<p>But that never happened. No matter what ingredients we put into the pot: quinoa, oyster, hummus&hellip; it was always the same. Spaghetti every time. We started off with lots of logic in the templates, we tried out logicless templates (lol). We tried presentation layers. We tried everything&hellip; except getting rid of templates.</p>

<p>So maybe it&rsquo;s time.</p>

<p>And why is this? Because templates don&rsquo;t correspond to anything meaningful in a single-page app. Pages are made up of mini-views, Components if you will.</p>

<p>Think like MVC. What are the templates for an autocompleter? Easy. 1: autocomplete.html.hbs. Oh, but what about JavaScript? There will be JavaScript&hellip; we also have: autocomplete.js.</p>

<p>&#8220;`html</p>

<!-- autocomplete.html.hbs -->


<p><form>
  <input type="text" />
  <select>
    <!-- suggestions will go here -->
  </select>
  <input type="submit" value="search" />
</form>
&#8220;`</p>

<pre><code class="javascript">// autocomplete.js
$("[type=\"text\"]").keyPress(function(ev) { /* ... */ });
$("select").change(function(ev) { /* ... */ });
$("form").submit(function(ev) { /* ... */ });
</code></pre>

<p>Let&rsquo;s think like an Object Oriented Programmer instead. We have a textfield with a lot of logic: when the user enters so much text, we want to run a query. We have a dropdown list of suggestions with a lot of logic: when the user updates the querystring, we want to filter out what&rsquo;s no good while we await our autocomplete ElasticSearch responses. And maybe each of these dropdown suggestions has a lot of logic: maybe they each show an image of some purchasable item, and maybe a link to that item, and to the manufacturer as well&hellip; Maybe you want all your suggestions to slowly turn into Nyan Cat. I don&rsquo;t know!</p>

<pre><code class="javascript">// searchbar.jsx
var Searchbar = React.createClass({
  on_key_press: function(ev) {
    //
  },

  render: function() {
    return (
      &lt;input 
          type="text"
          onKeyPress={this.on_key_press} /&gt;
    );
  }
});
</code></pre>

<pre><code class="javascript">// suggestion-list.jsx
var SuggestionList = React.createClass({
  on_change: fundo we still have
  render: function() {
    return (
      &lt;select onChange={this.on_change}&gt;
        &lt;!-- suggestions go here --&gt;
      &lt;/select&gt;
    );
  }
});
</code></pre>

<pre><code class="javascript">// suggestion.jsx
var Suggestion = React.createClass({
  render: function() {
    return (
      &lt;option value={this.props.value}&gt;{this.props.text}&lt;/option&gt;
    );
  }
});
</code></pre>

<p>As you can see, before we had our markup separated from our code. But why? Because it looks better? Sure, if you want to keep doing that, fine. But, remember how cool that windbreaker was at 17? This type of separation is the same way&hellip; it&rsquo;s separation for the sake of it. The unquestionable thing here is: it&rsquo;s better to think of HTML elements as objects. It&rsquo;s better to think in terms of components than in terms of templates.</p>

<p>I mean, when&rsquo;s the last time you went through Github and found a template for your webapp? Never.</p>

<p>But with a well-designed component, that&rsquo;s possible.</p>

<p>So why are we still stuck on templates? Why are we covering up pizza on the ceiling with a Some Like It Hot poster? Why don&rsquo;t we actually clean up the mess, think of elements and the events attached to them, and come to the logical conclusion that it&rsquo;s all probably one object that belongs in one file, as one object?</p>

<p>Or are we going to wear our Loudmouths to the grave?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logicless Templates: LOL]]></title>
    <link href="http://cuzzo.github.io/blog/2014/09/14/logicless-templates-lol/"/>
    <updated>2014-09-14T22:02:24-07:00</updated>
    <id>http://cuzzo.github.io/blog/2014/09/14/logicless-templates-lol</id>
    <content type="html"><![CDATA[<blockquote><p>Logicless: To be devoid of logic.</p>

<p><cite>Merriam-Webster&rsquo;s Dictionary</cite></p></blockquote>

<p>Babies are logicless, right? They eat and they shit. They throw toy blocks to and fro. They slap randomly at the Tower of Hanoi you bought them, not giving a damn about your shitty computer science references.</p>

<p>But logicless as they seem, they aren&rsquo;t really, are they? I mean, not even bogosort is. We just call babies logicless, as maybe some sort of harmless insult. &ldquo;Oh, Suzy, that baby of yours, he&rsquo;s just so&hellip; logicless.&rdquo; It almost sounds nice! The chic thing to say. The alternative, &ldquo;Hey, Suzy, that baby of yours, he&rsquo;s just such a&hellip; stupid bitch&hellip;&rdquo; that&rsquo;s probably gonna land you a swift smack from yours truly, Suzy.</p>

<p>And if you&rsquo;ve fallen for the promise of logicless templates, you probably deserve a swift smack as well. &ldquo;Logicless&rdquo; has a negative connotation. So it&rsquo;s no coincidence that logicless templates are severely flawed. They have their uses, sure. I use Handlebars in a few projects. But they belong nowhere near a large web application (most the time). Here&rsquo;s why:</p>

<ul>
<li><a href="#logicless-orly">Logicless? ORLY?</a></li>
<li><a href="#logic-is-unavoidable">Logic Is Unavoidable</a></li>
</ul>


<h2><a name="logicless-orly">Logicless? ORLY?</a></h2>

<p>First of all, let&rsquo;s just get one thing straight. The very idea of calling Handlebars and Moustache &ldquo;logicless&rdquo; is&hellip; well&hellip; logicless. Retarded even, if you prefer. We&rsquo;ve had logicless templates, long long before Handlebars was a thing. We called those templates HTML. And HTML worked fine, thank you very much. Handlebars, though, is not what the cool kids are calling HTML these days. No, it&rsquo;s a templating library, and it has logic. It has <code>if</code>s and <code>for</code>s and anybody who&rsquo;s anybody these days adds in pluralization helpers, i18n&hellip; The list goes on. But when it comes down to it, in most cases, logicless templates are just a bad, underpowered frameworks.</p>

<p>When I was 16 and Handlebars came onto the scene, I fell for that logicless bullcrap hook, line, and sinker. Naive, 16-year-old me ate that shit up. Separation of concerns? Yes please. That whole promise of having your designers be able to edit your markup without knowing code? That totally worked out. Cause checking in changes and navigating through codebases in general is oh so much easier than understanding trivial <code>if</code> clauses. Cause, you know, non-engineers are completely incompetent. And retarded. (Except not really&hellip;)</p>

<p>No. Logicless templates don&rsquo;t even make sense. They have all kinds of logic. And you know what else they have all kind of? Broken, empty promises.</p>

<p>You remember that one about designers taking over the templates? Well, they changed things and wondered why the code didn&rsquo;t work if the h1 was an h2 (because we wrote shitty selectors), or how come the link stopped working when they changed an anchor to a div (because we care about semantics).</p>

<p>Plus they fucked up the commit log.</p>

<p>I&rsquo;ve talked to exactly zero people employed with the sole task of marking up HTML and merrily committing this with their magical surprise knowledge of Git&hellip; No, this person is a rumor. That designer that can magically commit changes, navigate the codebase, and knows HTML and CSS and logic&hellip; we have a special title for that type of designer: &ldquo;engineer&rdquo;.</p>

<p>There&rsquo;s an inherent coupling of semantics (markup) and events (code) in well designed applications. And separating it isn&rsquo;t always necessary, and is sometimes very, very wrong.</p>

<h2><a name="logic-is-unavoidable">Logic Is Unavoidable</a></h2>

<p>Wouldn&rsquo;t it be great if our apps didn&rsquo;t need logic? Wouldn&rsquo;t it be great if we could just smash our foreheads on the power button of our servers, and the paycheques would start flying through the cracks in the door, like Harry Potter&rsquo;s letters from Hogwarts?</p>

<p>Cause those are the servers I want. So too bad they don&rsquo;t exist.</p>

<p>Why? We need logic. Sometimes, we have logic we don&rsquo;t need. A lot of times, sometimes. But the fact remains: we need logic.</p>

<p>Logicless templates <em>at best</em> just shift this logic into some separate layer, the presentation layer, or&ndash;worse&ndash;to the controller. Probably the only thing worse than bad templates is bad controllers.</p>

<p>Presentation layers help slim down your OMG-fat views. They&rsquo;re not a bad thing. But there&rsquo;s certain logic, render-logic, that belongs at the render level: pluralization and date-formating are prime examples.</p>

<p>It&rsquo;s possible to imagine a blog post with a <code>created_at</code> timestamp attached to it. It&rsquo;s possible to imagine you&rsquo;d display this in three separate places, in three different formats. What benefit do you get from hiding that in the presentation layer? Zilch.</p>

<p>And don&rsquo;t even get me started on pluralization&hellip; It usually only takes one time before you, a sane developer, has the thought cross your head, &ldquo;Weeeeeell, pluralization isn&rsquo;t <em>really</em> logic&hellip;&rdquo; And you go fishing through Github for a pluralization helper, trying to con yourself into believing that Handlebar Moustaches are still cool.</p>

<p>There&rsquo;s a very debatable line about which mutations should be done in the presentation layer and which at the render level. But the line that says &ldquo;none of this should happen at the render level&rdquo; &hellip; that line is imaginary, and hardly ever followed even when using &ldquo;logicless&rdquo; templates. The separation of concerns there, is a lot of times, just separation for the sake of it. It&rsquo;s just a big waste of time and bad design.</p>

<p>But I can see the headlines now: &ldquo;ALL YOUR LOGIC ARE BELONG TO TEMPLATES&rdquo;. I can see them already. It&rsquo;s not what I advocate. It&rsquo;s not what I say. But whatever.</p>
]]></content>
  </entry>
  
</feed>
